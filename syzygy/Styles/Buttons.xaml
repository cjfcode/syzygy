<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Syzygy">

    <ResourceDictionary.MergedDictionaries>
        <!-- Order matters -->
        <ResourceDictionary Source="Colors.xaml" />
        <ResourceDictionary Source="Fonts.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Hoverless Button -->
    <Style TargetType="{x:Type Button}" x:Key="HoverlessButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Window Chrome Button -->
    <Style TargetType="{x:Type Button}" x:Key="WindowChromeButton">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="17 0" />
        <Setter Property="Foreground" Value="{StaticResource CaptionFontBrush}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!-- Set the color of the buttons when the MainWindow is active -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:MainWindow}}, Path=IsActive}" Value="True">
                <Setter Property="Foreground" Value="{StaticResource CaptionFontBrush}" />
            </DataTrigger>

            <!-- Set the color of the buttons when the MainWindow is inactive -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:MainWindow}}, Path=IsActive}" Value="False">
                <Setter Property="Foreground" Value="{StaticResource InactiveWindowButtonBrush}" />
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource CaptionButtonMouseOverBrush}" />
                
                <!-- Set the color of the Foreground on mouse over, this preserves mouseover color when the window is inactive -->
                <Setter Property="Foreground" Value="{StaticResource CaptionFontBrush}" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource CaptionButtonDownBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- PopupMenu Button -->
    <Style TargetType="{x:Type Button}" x:Key="PopupMenuButton" BasedOn="{StaticResource WindowChromeButton}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="5" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Left" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Hamburger Menu Button--> 
    <Style TargetType="{x:Type ToggleButton}" x:Key="HamburgerMenuButton">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="11 0" />
        <Setter Property="Foreground" Value="{StaticResource CaptionFontBrush}" />
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!-- Set the color of the ToggleButton when the MainWindow is active -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:MainWindow}}, Path=IsActive}" Value="True">
                <Setter Property="Foreground" Value="{StaticResource CaptionFontBrush}" />
            </DataTrigger>

            <!-- Set the color of the ToggleButton when the MainWindow is inactive -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:MainWindow}}, Path=IsActive}" Value="False">
                <Setter Property="Foreground" Value="{StaticResource InactiveWindowButtonBrush}" />
            </DataTrigger>

            <!-- Set the color of the ToggleButton when the Popup menu is open -->
            <DataTrigger Binding="{Binding ElementName=HamburgerMenuPopup, Path=IsOpen}" Value="True">
                <Setter Property="IsHitTestVisible" Value="False"/>
                <Setter Property="Background" Value="{StaticResource CaptionButtonDownBrush}" />
            </DataTrigger>

            <!--<MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource self}, Path=IsMouseOver}"  Value="True" />
                    <Condition Binding="{Binding RelativeSource={RelativeSource self}, Path=IsPressed}"  Value="False" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource CaptionButtonMouseOverBrush}" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>-->

            <!-- Set the color of buttons on mouse over -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource CaptionButtonMouseOverBrush}" />

            <!-- Set the color of the Foreground on mouse over, this preserves mouseover color when the window is inactive -->
                <Setter Property="Foreground" Value="{StaticResource CaptionFontBrush}" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource CaptionButtonDownBrush}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <!-- Window Chrome Restore Button -->
    <Style TargetType="{x:Type Button}" x:Key="WindowChromeRestoreButton" BasedOn="{StaticResource WindowChromeButton}">

        <Style.Triggers>
            <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="Normal">
                <Setter Property="Content" Value="&#xE922;" />
            </DataTrigger>
            <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"  Value="Maximized">
                <Setter Property="Content" Value="&#xE923;" />
            </DataTrigger>
        </Style.Triggers>

    </Style>

    <!-- Window Chrome Close Button -->
    <Style TargetType="{x:Type Button}" x:Key="WindowChromeCloseButton" BasedOn="{StaticResource WindowChromeButton}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource CaptionCloseButtonMouseOverBrush}" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource CaptionCloseButtonDownBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>